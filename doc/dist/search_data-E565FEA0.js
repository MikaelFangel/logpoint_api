searchData={"items":[{"type":"module","title":"LogpointApi","doc":"Elixir library for interacting with the Logpoint API.\n\nThis library provides a simple, stateless interface to the Logpoint API.\nAll functions take credentials as parameters and make direct HTTP requests.","ref":"LogpointApi.html"},{"type":"module","title":"Example Usage - LogpointApi","doc":"```elixir\n# Define credentials\ncredentials = %{\n  ip: \"127.0.0.1\",\n  username: \"admin\",\n  secret_key: \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\",\n  verify_ssl: false  # optional, defaults to false for self-signed certs\n}\n\n# Create a query\nquery = %LogpointApi.Query{\n  query: \"user=*\",\n  limit: 100,\n  repos: [\"127.0.0.1:5504\"],\n  time_range: [1_714_986_600, 1_715_031_000]\n}\n\n# Run a complete search (get search_id + poll for results)\n{:ok, result} = LogpointApi.run_search(credentials, query)\n\n# Or do it step by step\n{:ok, %{\"search_id\" => search_id}} = LogpointApi.get_search_id(credentials, query)\n{:ok, result} = LogpointApi.get_search_result(credentials, search_id)\n```","ref":"LogpointApi.html#module-example-usage"},{"type":"type","title":"LogpointApi.credentials/0","doc":"Credentials for authenticating with the Logpoint API.","ref":"LogpointApi.html#t:credentials/0"},{"type":"function","title":"LogpointApi.add_comments/2","doc":"Add comments to incidents.\n\nAccepts either a map of %{\"incident_id\" => [\"comment1\", \"comment2\"]}\nor an IncidentCommentData struct.","ref":"LogpointApi.html#add_comments/2"},{"type":"function","title":"LogpointApi.assign_incidents/3","doc":"Assign incidents to a user.\n\nAccepts either a list of incident IDs or an IncidentIDs struct.","ref":"LogpointApi.html#assign_incidents/3"},{"type":"function","title":"LogpointApi.close_incidents/2","doc":"Close incidents.","ref":"LogpointApi.html#close_incidents/2"},{"type":"function","title":"LogpointApi.devices/1","doc":"Get devices from the Logpoint instance.","ref":"LogpointApi.html#devices/1"},{"type":"function","title":"LogpointApi.get_data_from_incident/2","doc":"Get a specific incident and its related data.","ref":"LogpointApi.html#get_data_from_incident/2"},{"type":"function","title":"LogpointApi.get_search_id/2","doc":"Create a search and get its search id.","ref":"LogpointApi.html#get_search_id/2"},{"type":"function","title":"LogpointApi.get_search_result/2","doc":"Retrieve the search result of a specific search id.","ref":"LogpointApi.html#get_search_result/2"},{"type":"function","title":"LogpointApi.incident/3","doc":"Get incident information by object ID and incident ID.","ref":"LogpointApi.html#incident/3"},{"type":"function","title":"LogpointApi.incident_states/3","doc":"Get incident states within a time range.","ref":"LogpointApi.html#incident_states/3"},{"type":"function","title":"LogpointApi.incidents/3","doc":"Get incidents within a time range.","ref":"LogpointApi.html#incidents/3"},{"type":"function","title":"LogpointApi.livesearches/1","doc":"Get live searches from the Logpoint instance.","ref":"LogpointApi.html#livesearches/1"},{"type":"function","title":"LogpointApi.loginspects/1","doc":"Get loginspects from the Logpoint instance.","ref":"LogpointApi.html#loginspects/1"},{"type":"function","title":"LogpointApi.logpoint_repos/1","doc":"Get logpoint repositories from the instance.","ref":"LogpointApi.html#logpoint_repos/1"},{"type":"function","title":"LogpointApi.reopen_incidents/2","doc":"Reopen incidents.","ref":"LogpointApi.html#reopen_incidents/2"},{"type":"function","title":"LogpointApi.resolve_incidents/2","doc":"Resolve incidents.","ref":"LogpointApi.html#resolve_incidents/2"},{"type":"function","title":"LogpointApi.run_search/3","doc":"Run a complete search: submit query, poll for completion, and return results.\n\nThis is a convenience function that combines `get_search_id/2` and `get_search_result/2`\nwith automatic polling until the search completes.","ref":"LogpointApi.html#run_search/3"},{"type":"function","title":"LogpointApi.user_preference/1","doc":"Get user preferences from the Logpoint instance.","ref":"LogpointApi.html#user_preference/1"},{"type":"function","title":"LogpointApi.users/1","doc":"Get users from the Logpoint instance.","ref":"LogpointApi.html#users/1"},{"type":"extras","title":"LogpointApi","doc":"# LogpointApi\n\nA clean, stateless Elixir library for interacting with the [Logpoint API](https://docs.logpoint.com/docs/logpoint-api-reference/en/latest/index.html).\n\nThis library provides simple functions that make direct HTTP requests to the Logpoint API without any OTP overhead or persistent connections.","ref":"readme.html"},{"type":"extras","title":"Installation - LogpointApi","doc":"```elixir\ndef deps do\n  [\n    {:logpoint_api, github: \"MikaelFangel/logpoint_api\", tag: \"v1.0.0\"}\n  ]\nend\n```","ref":"readme.html#installation"},{"type":"extras","title":"Basic Usage - LogpointApi","doc":"All functions require credentials as the first parameter:\n\n```elixir\n# Define your credentials\ncredentials = %{\n  ip: \"127.0.0.1\",\n  username: \"admin\",\n  secret_key: \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\",\n  verify_ssl: false  # optional, defaults to false for self-signed certs\n}\n```","ref":"readme.html#basic-usage"},{"type":"extras","title":"Complete Search (Recommended) - LogpointApi","doc":"The easiest way to perform a search is using `run_search/2`, which handles the entire search lifecycle:\n\n```elixir\n# Create a query\nquery = %LogpointApi.Query{\n  query: \"user=*\",\n  limit: 100,\n  repos: [\"127.0.0.1:5504\"],\n  time_range: [1_714_986_600, 1_715_031_000]\n}\n\n# Run the complete search (submit + poll for results)\n{:ok, results} = LogpointApi.run_search(credentials, query)\n```","ref":"readme.html#complete-search-recommended"},{"type":"extras","title":"Manual Search Control - LogpointApi","doc":"For more control over the search process:\n\n```elixir\n# Submit a search and get the search ID\n{:ok, %{\"search_id\" => search_id}} = LogpointApi.get_search_id(credentials, query)\n\n# Check the search result (may need to poll until final: true)\n{:ok, result} = LogpointApi.get_search_result(credentials, search_id)\n```","ref":"readme.html#manual-search-control"},{"type":"extras","title":"Instance Information - LogpointApi","doc":"```elixir\n# Get various types of data from your Logpoint instance\n{:ok, user_prefs} = LogpointApi.user_preference(credentials)\n{:ok, repos} = LogpointApi.logpoint_repos(credentials)\n{:ok, devices} = LogpointApi.devices(credentials)\n{:ok, users} = LogpointApi.users(credentials)\n```","ref":"readme.html#instance-information"},{"type":"extras","title":"Incident Management - LogpointApi","doc":"```elixir\n# Get incident information\n{:ok, incident} = LogpointApi.incident(credentials, \"incident_obj_id\", \"incident_id\")\n\n# Get incidents within a time range\n{:ok, incidents} = LogpointApi.incidents(credentials, 1_714_986_600, 1_715_031_000)\n\n# Add comments to incidents\ncomments = %{\"incident_id_1\" => [\"This needs attention\", \"Escalating to team\"]}\n{:ok, _result} = LogpointApi.add_comments(credentials, comments)\n\n# Assign incidents to a user  \n{:ok, _result} = LogpointApi.assign_incidents(credentials, [\"incident_id_1\", \"incident_id_2\"], \"user_id\")\n\n# Update incident states\n{:ok, _result} = LogpointApi.resolve_incidents(credentials, [\"incident_id_1\"])\n{:ok, _result} = LogpointApi.close_incidents(credentials, [\"incident_id_2\"])\n{:ok, _result} = LogpointApi.reopen_incidents(credentials, [\"incident_id_3\"])\n```","ref":"readme.html#incident-management"},{"type":"extras","title":"Query Structure - LogpointApi","doc":"Create queries using the `Log\npointApi.Query` struct:\n\n```elixir\n%LogpointApi.Query{\n  query: \"your_search_query\",           # String: The search query\n  limit: 1000,                          # Integer: Maximum number of results\n  repos: [\"repo1\", \"repo2\"],           # List: Repository names to search\n  time_range: [start_time, end_time]   # List: Unix timestamps [from, to]\n}\n```","ref":"readme.html#query-structure"},{"type":"extras","title":"SSL Configuration - LogpointApi","doc":"For servers with self-signed certificates:\n\n```elixir\ncredentials = %{\n  ip: \"192.168.1.100\",\n  username: \"admin\", \n  secret_key: \"secret123\",\n  verify_ssl: false  # Disables SSL certificate verification\n}\n```\n\nFor production servers with valid certificates:\n\n```elixir\ncredentials = %{\n  ip: \"logpoint.company.com\",\n  username: \"admin\",\n  secret_key: \"secret123\",\n  verify_ssl: true  # Enables SSL certificate verification\n}\n```","ref":"readme.html#ssl-configuration"},{"type":"extras","title":"Error Handling - LogpointApi","doc":"All functions return `{:ok, result}` or `{:error, reason}` tuples:\n\n```elixir\ncase LogpointApi.run_search(credentials, query) do\n  {:ok, results} ->\n    IO.puts(\"Found #{length(results[\"rows\"])} results\")\n    \n  {:error, reason} ->\n    IO.puts(\"Search failed: #{reason}\")\nend\n```","ref":"readme.html#error-handling"},{"type":"extras","title":"Advanced Options - LogpointApi","doc":"The `run_search/3` function accepts options for polling behavior:\n\n```elixir\noptions = [\n  poll_interval: 2000,  # Poll every 2 seconds (default: 1000ms)\n  max_retries: 30       # Maximum polling attempts (default: 60)\n]\n\n{:ok, results} = LogpointApi.run_search(credentials, query, options)\n```","ref":"readme.html#advanced-options"},{"type":"extras","title":"Examples - LogpointApi","doc":"","ref":"readme.html#examples"},{"type":"extras","title":"Complete Workflow Example - LogpointApi","doc":"```elixir\n# Setup\ncredentials = %{\n  ip: \"logpoint.company.com\",\n  username: \"admin\",\n  secret_key: \"your_secret_key\",\n  verify_ssl: false\n}\n\n# Search for failed logins in the last hour\nquery = %LogpointApi.Query{\n  query: \"event_type=failed_login\",\n  limit: 500,\n  repos: [\"main_repo\"],\n  time_range: [System.system_time(:second) - 3600, System.system_time(:second)]\n}\n\n# Run search and handle results\ncase LogpointApi.run_search(credentials, query) do\n  {:ok, %{\"rows\" => events}} ->\n    IO.puts(\"Found #{length(events)} failed login attempts\")\n    \n    # Get incident information\n    {:ok, incidents} = LogpointApi.incidents(credentials, \n                                           System.system_time(:second) - 3600, \n                                           System.system_time(:second))\n    \n    # Add comments to relevant incidents\n    if length(incidents[\"incidents\"]) > 0 do\n      incident_id = hd(incidents[\"incidents\"])[\"_id\"]\n      comments = %{incident_id => [\"Investigating failed logins from search\"]}\n      LogpointApi.add_comments(credentials, comments)\n    end\n    \n  {:error, reason} ->\n    IO.puts(\"Search failed: #{reason}\")\nend\n```","ref":"readme.html#complete-workflow-example"},{"type":"extras","title":"Contributing - LogpointApi","doc":"Please refer to [CONTRIBUTING.md](CONTRIBUTING.md) for development guidelines.","ref":"readme.html#contributing"},{"type":"extras","title":"License - LogpointApi","doc":"This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.","ref":"readme.html#license"},{"type":"extras","title":"Contributing","doc":"# Contributing\n\nThank you for considering contributing to our project! We appreciate your time and effort. To ensure a smooth collaboration process, please follow these guidelines when creating issues or pull requests.","ref":"contributing.html"},{"type":"extras","title":"Creating Good Issues or Pull Requests - Contributing","doc":"","ref":"contributing.html#creating-good-issues-or-pull-requests"},{"type":"extras","title":"Issues - Contributing","doc":"- Before creating an issue, search the existing issues to avoid duplicates.\n - Clearly describe the problem or feature request.\n - Include relevant details such as steps to reproduce, expected behavior, and actual behavior.","ref":"contributing.html#issues"},{"type":"extras","title":"Pull Requests - Contributing","doc":"- Fork the repository and create a new branch for your changes.\n - Make the pull request a small as possible.\n - Write clear commit messages.\n - Include tests if applicable.","ref":"contributing.html#pull-requests"},{"type":"extras","title":"Community and Behavioral Expectations - Contributing","doc":"","ref":"contributing.html#community-and-behavioral-expectations"},{"type":"extras","title":"Be Respectful - Contributing","doc":"- Treat others with kindness and respect.\n - Avoid offensive language or behavior.\n -Listen actively and consider different perspectives.","ref":"contributing.html#be-respectful"},{"type":"extras","title":"Collaborate - Contributing","doc":"- Work together to achieve common goals.\n- Provide constructive feedback.\n- Encourage new contributors.","ref":"contributing.html#collaborate"}],"proglang":"elixir","content_type":"text/markdown","producer":{"name":"ex_doc","version":"0.38.3"}}